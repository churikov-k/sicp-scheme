(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))

(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))
(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

;tests
(define set1 (adjoin-set 7 '()))
(define set1 (adjoin-set '3 set1))
(define set1 (adjoin-set '9 set1))
(define set1 (adjoin-set '1 set1))
(define set1 (adjoin-set '5 set1))
(define set1 (adjoin-set '11 set1))
(define set2 (adjoin-set 3 '()))
(define set2 (adjoin-set '1 set2))
(define set2 (adjoin-set '7 set2))
(define set2 (adjoin-set '5 set2))
(define set2 (adjoin-set '9 set2))
(define set2 (adjoin-set '11 set2))
(define set3 (adjoin-set 5 '()))
(define set3 (adjoin-set '3 set3))
(define set3 (adjoin-set '9 set3))
(define set3 (adjoin-set '1 set3))
(define set3 (adjoin-set '7 set3))
(define set3 (adjoin-set '11 set3))
set1
set2
set3
(tree->list-1 set1)
(tree->list-2 set1)
(tree->list-1 set2)
(tree->list-2 set2)
(tree->list-1 set3)
(tree->list-2 set3)
;(intersection-set set1 set2)
;(union-set set1 set2)